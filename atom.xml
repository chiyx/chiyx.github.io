<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>千觞@技术博客</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://chiyx.github.io/"/>
  <updated>2017-03-12T17:23:09.000Z</updated>
  <id>https://chiyx.github.io/</id>
  
  <author>
    <name>pitchy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>java2d合图系列-绘制圆形图像图层</title>
    <link href="https://chiyx.github.io/2017/03/12/java2d-ellipse-image-draw/"/>
    <id>https://chiyx.github.io/2017/03/12/java2d-ellipse-image-draw/</id>
    <published>2017-03-12T15:38:30.000Z</published>
    <updated>2017-03-12T17:23:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>在当前潮流的趋势中，对于用户头像的展示一般都是设计成圆形图层的展现形式，如果是在网页上进行展示，我们可以通过css3的将头像包在一个方形的<strong>div</strong>中，然后设置 <strong>border-radius</strong>的值为头像的边长相等便可。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">div</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">92px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">92px</span>;</div><div class="line">    <span class="attribute">border-radius</span>: <span class="number">92px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>但是如果是在图片合成的时候，需要将头像合到一个预先挖好一个圆坑的底图中，又该如何做呢? 比如有如下的底图和用户头像:</p>
<p><img src="/images/avatar_re.png" alt="image"></p>
<p><img src="/images/mytaobao_avart.jpeg" alt="image"></p>
<p>现在需要将后面的头像图片替换掉底图中被框起来的部分，采用的步骤基本如下:</p>
<ol>
<li>将头像缩放到底图中的头像框大小</li>
<li>将缩放后的头像进一步变成圆形图片</li>
<li>将图像头像覆盖到底图的头像框上</li>
</ol>
<p>抛开缩放和覆盖(即打水印)不表，那么问题来了：如何将方形的图像变为一个圆形图像呢？</p>
<a id="more"></a>
<h2 id="思路一-将矩形头像超出其内接椭圆的部分都设置为透明即可在视觉上营造出椭圆型图像的概念"><a href="#思路一-将矩形头像超出其内接椭圆的部分都设置为透明即可在视觉上营造出椭圆型图像的概念" class="headerlink" title="思路一: 将矩形头像超出其内接椭圆的部分都设置为透明即可在视觉上营造出椭圆型图像的概念"></a>思路一: 将矩形头像超出其内接椭圆的部分都设置为透明即可在视觉上营造出椭圆型图像的概念</h2><blockquote>
<p>正方形和圆形分别为长方形和椭圆的特例，为更好的适配不同场景，在处理上应该采用更广的定义</p>
</blockquote>
<ol>
<li>将原头像转化为支持透明度设置的图片格式如: png</li>
<li>设计一个代表对应图像矩形框的内接椭圆的结构，其有一个 <code>contain</code> 方法，用于判断某个点是否处于其中.</li>
<li>遍历图像的各个像素，如果没有落在椭圆内则将其透明度设置为0</li>
</ol>
<p>具体<code>scala</code>代码如下:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">val (width, height) = (image.getWidth, image.getHeight)</div><div class="line"><span class="comment">// 1. 如果源图不支持透明度如：jpg，则将其重绘到一个支持透明的画布上</span></div><div class="line">val target = </div><div class="line">    <span class="keyword">if</span> (image.getTransparency == Transparency.TRANSLUCENT) image</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">       val tmp = <span class="keyword">new</span> BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB)</div><div class="line">       tmp.createGraphics().drawImage(image, <span class="number">0</span>, <span class="number">0</span>, <span class="keyword">null</span>)</div><div class="line">       tmp</div><div class="line">    &#125;</div><div class="line"><span class="comment">// 2. 内接椭圆, java2d已为我们备好的大餐，省了很多回顾几何的麻烦</span></div><div class="line">val ellipse = <span class="keyword">new</span> Ellipse2D.Double(<span class="number">0</span>, <span class="number">0</span>, width, height)</div><div class="line"><span class="comment">// 3. 遍历所有像素点，如果不在椭圆里，将该像素设置为全透明</span></div><div class="line"><span class="number">0</span> until width foreach &#123; x =&gt;</div><div class="line">    <span class="number">0</span> until height foreach &#123; y =&gt;</div><div class="line">        <span class="keyword">if</span> (!ellipse.contains(x, y)) &#123;</div><div class="line">            val rgb = target.getRGB(x, y)</div><div class="line">            target.setRGB(x, y, rgb &amp; <span class="number">0x00ffffff</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 返回新图像</span></div><div class="line">target</div></pre></td></tr></table></figure>
<p>效果如下:</p>
<p><img src="/images/mohe_avatar_ellipse_2.png" alt="image"></p>
<p>可以发现得到的圆形图像的边缘很不光滑，毛刺很多，这是因为在内接椭圆的边缘划分其实是浮点值，无法直接映射到像素点上，<br>这就造成了在边缘点的处理上并不均匀，导致毛刺。</p>
<h2 id="思路二-在一个透明画布上将画笔设置为头像图片，用该画笔在画布上绘制一个椭圆"><a href="#思路二-在一个透明画布上将画笔设置为头像图片，用该画笔在画布上绘制一个椭圆" class="headerlink" title="思路二: 在一个透明画布上将画笔设置为头像图片，用该画笔在画布上绘制一个椭圆"></a>思路二: 在一个透明画布上将画笔设置为头像图片，用该画笔在画布上绘制一个椭圆</h2><blockquote>
<p>因为java2d在绘制各类图形时，会有一些边缘光滑处理的算法，只要我们指定特定的绘制hints就行</p>
</blockquote>
<ol>
<li>创建一个源图像同等大小的透明画布</li>
<li>设置绘制时的边缘处理的hints</li>
<li>将原图像设置为该画布的画笔，这样在绘制图形时就会使用该图像对应像素点的rgba值</li>
<li>在画布中绘制一个内接椭圆</li>
</ol>
<p>具体<code>scala</code>代码如下:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">val (width, height) = (image.getWidth, image.getHeight)</div><div class="line"><span class="comment">// 创建画布</span></div><div class="line">val target = <span class="keyword">new</span> BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB)</div><div class="line"><span class="comment">// 设置hints</span></div><div class="line">val rh = <span class="keyword">new</span> RenderingHints(</div><div class="line">  RenderingHints.KEY_ANTIALIASING,</div><div class="line">  RenderingHints.VALUE_ANTIALIAS_ON)</div><div class="line">rh.put(RenderingHints.KEY_RENDERING,</div><div class="line">  RenderingHints.VALUE_RENDER_QUALITY)</div><div class="line">val g = target.createGraphics()</div><div class="line">g.setRenderingHints(rh)</div><div class="line"><span class="comment">// 设置画笔</span></div><div class="line">g.setPaint(<span class="keyword">new</span> TexturePaint(image, <span class="keyword">new</span> Rectangle(<span class="number">0</span>, <span class="number">0</span>, width, height)))</div><div class="line"><span class="comment">// 绘制内接椭圆</span></div><div class="line">g.fill(<span class="keyword">new</span> Ellipse2D.Double(<span class="number">0</span>, <span class="number">0</span>, width, height))</div><div class="line">target</div></pre></td></tr></table></figure>
<p>效果如下:</p>
<p><img src="/images/mohe_avatar_ellipse_1.png" alt="image"></p>
<p>可以看到这次得到的圆形图像边缘已经如丝般柔滑，Done！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在当前潮流的趋势中，对于用户头像的展示一般都是设计成圆形图层的展现形式，如果是在网页上进行展示，我们可以通过css3的将头像包在一个方形的&lt;strong&gt;div&lt;/strong&gt;中，然后设置 &lt;strong&gt;border-radius&lt;/strong&gt;的值为头像的边长相等便可。&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;div&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;92px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;92px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;border-radius&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;92px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;但是如果是在图片合成的时候，需要将头像合到一个预先挖好一个圆坑的底图中，又该如何做呢? 比如有如下的底图和用户头像:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/avatar_re.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/mytaobao_avart.jpeg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;现在需要将后面的头像图片替换掉底图中被框起来的部分，采用的步骤基本如下:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;将头像缩放到底图中的头像框大小&lt;/li&gt;
&lt;li&gt;将缩放后的头像进一步变成圆形图片&lt;/li&gt;
&lt;li&gt;将图像头像覆盖到底图的头像框上&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;抛开缩放和覆盖(即打水印)不表，那么问题来了：如何将方形的图像变为一个圆形图像呢？&lt;/p&gt;
    
    </summary>
    
      <category term="java2d" scheme="https://chiyx.github.io/categories/java2d/"/>
    
    
      <category term="image-process" scheme="https://chiyx.github.io/tags/image-process/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://chiyx.github.io/2017/03/10/hello-world/"/>
    <id>https://chiyx.github.io/2017/03/10/hello-world/</id>
    <published>2017-03-10T03:14:35.000Z</published>
    <updated>2017-03-10T13:31:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/writing.html&quot;&gt;Writing&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Run-server&quot;&gt;&lt;a href=&quot;#Run-server&quot; class=&quot;headerlink&quot; title=&quot;Run server&quot;&gt;&lt;/a&gt;Run server&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ hexo server&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/server.html&quot;&gt;Server&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Generate-static-files&quot;&gt;&lt;a href=&quot;#Generate-static-files&quot; class=&quot;headerlink&quot; title=&quot;Generate static files&quot;&gt;&lt;/a&gt;Generate static files&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ hexo generate&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/generating.html&quot;&gt;Generating&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Deploy-to-remote-sites&quot;&gt;&lt;a href=&quot;#Deploy-to-remote-sites&quot; class=&quot;headerlink&quot; title=&quot;Deploy to remote sites&quot;&gt;&lt;/a&gt;Deploy to remote sites&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ hexo deploy&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
